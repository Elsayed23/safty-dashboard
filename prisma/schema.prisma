datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                  @id @default(uuid())
  name                      String
  work_id                   String?
  email                     String                  @unique
  password                  String
  job_titleId               String?
  job_title                 JobTitle?               @relation(fields: [job_titleId], references: [id])
  address                   String
  telephone                 String
  supervisors               Supervisor[]            @relation("UserSupervisors")
  subordinates              Supervisor[]            @relation("UserSubordinates")
  approved                  Boolean                 @default(false)
  violations                Violation[]             @relation("UserViolations")
  approvedViolations        UserViolationApproval[]
  user_photo                String?                 @db.LongText
  roleId                    String?
  role                      Role?                   @relation(fields: [roleId], references: [id], name: "RoleUsers")
  trainings                 Training[]              @relation("UserTrainings")
  instructions              Training[]              @relation("InstructorTrainings")
  TrainingDetail            TrainingDetail[]
  pins                      Pin[]                   @relation("UserPins")
  comments                  ViolationsComments[]    @relation("UserComments")
  general_data_supervisor   GeneralData[]           @relation("SupervisorData")
  general_data_site_manager GeneralData[]           @relation("SiteManagerData")
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
}

model Supervisor {
  userId       String
  supervisorId String
  user         User   @relation("UserSupervisors", fields: [userId], references: [id])
  supervisor   User   @relation("UserSubordinates", fields: [supervisorId], references: [id])

  @@id([userId, supervisorId])
}

model Role {
  id        String   @id @default(uuid())
  name      String
  users     User[]   @relation("RoleUsers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Violation {
  id          String                  @id @default(uuid())
  user_id     String
  user        User                    @relation("UserViolations", fields: [user_id], references: [id])
  approvals   UserViolationApproval[]
  name        String
  images      ViolationImages[]
  description String?
  status      String
  comments    ViolationsComments[]    @relation("ViolationComments")
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}

model ViolationsComments {
  id          String    @id @default(uuid())
  comment     String
  commentedBy String
  user        User      @relation("UserComments", fields: [commentedBy], references: [id])
  violationId String
  violation   Violation @relation("ViolationComments", fields: [violationId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserViolationApproval {
  user_id      String
  violation_id String
  user         User      @relation(fields: [user_id], references: [id])
  violation    Violation @relation(fields: [violation_id], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  @@id([user_id, violation_id])
}

model ViolationImages {
  id           String     @id @default(uuid())
  path         String     @db.LongText
  violation_id String
  violation    Violation? @relation(fields: [violation_id], references: [id])
}

model JobTitle {
  id        String   @id @default(uuid())
  title     String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Training {
  id            String         @id @default(uuid())
  user_id       String
  instructor_id String
  training_id   String
  user          User?          @relation("UserTrainings", fields: [user_id], references: [id])
  instructor    User?          @relation("InstructorTrainings", fields: [instructor_id], references: [id])
  training      TrainingDetail @relation(fields: [training_id], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model TrainingDetail {
  id           String     @id @default(uuid())
  name         String
  abbreviation String
  comments     String?
  created_by   String?
  creator      User?      @relation(fields: [created_by], references: [id])
  trainings    Training[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Instrument {
  id                 String             @id @default(uuid())
  name               String
  typeId             String
  place              String
  customInstrumentId String
  type               InstrumentType     @relation(fields: [typeId], references: [id])
  typeOfTests        TypeOfTest[]
  tests              Test[]
  files              InstrumentsFiles[] @relation("InstrumentFiles")
  images             InstrumentImage[]  @relation("InstrumentImages")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model InstrumentImage {
  id           String     @id @default(uuid())
  path         String     @db.LongText
  instrumentId String
  instrument   Instrument @relation(fields: [instrumentId], references: [id], name: "InstrumentImages")
}

model InstrumentsFiles {
  id           String     @id @default(uuid())
  name         String
  path         String
  instrumentId String
  instrument   Instrument @relation(fields: [instrumentId], references: [id], name: "InstrumentFiles")
}

model InstrumentType {
  id          String       @id @default(uuid())
  name        String
  instruments Instrument[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TypeOfTest {
  id           String      @id @default(uuid())
  name         String
  instrumentId String
  instrument   Instrument  @relation(fields: [instrumentId], references: [id])
  testEntries  TestEntry[]
  Test         Test[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model TestEntry {
  id             String     @id @default(uuid())
  typeOfTestId   String
  typeOfTest     TypeOfTest @relation(fields: [typeOfTestId], references: [id])
  typeOfTestName String
  testCheckName  String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Test {
  id                String           @id @default(uuid())
  instrumentId      String
  instrument        Instrument       @relation(fields: [instrumentId], references: [id])
  typeOfTestId      String
  typeOfTest        TypeOfTest       @relation(fields: [typeOfTestId], references: [id])
  typeOfTestName    String
  testEntriesChecks TestEntryCheck[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model TestEntryCheck {
  id            String   @id @default(uuid())
  testId        String
  test          Test     @relation(fields: [testId], references: [id])
  testCheckName String
  check         Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Pin {
  id        String   @id @default(uuid())
  lat       Float
  lng       Float
  icon      String
  name      String
  data      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserPins")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model GeneralData {
  id            String   @id @default(uuid())
  name          String
  supervisorId  String
  siteManagerId String
  supervisor    User     @relation("SupervisorData", fields: [supervisorId], references: [id])
  siteManager   User     @relation("SiteManagerData", fields: [siteManagerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
